import math

# Constants for the players
HUMAN = 'O'
AI = 'X'
EMPTY = ' '

# Initialize the board
def create_board():
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]

# Check if there are any empty cells left
def is_moves_left(board):
    for row in board:
        if EMPTY in row:
            return True
    return False

# Evaluate the board for a terminal state
def evaluate(board):
    # Check rows for victory
    for row in board:
        if row[0] == row[1] == row[2]:
            if row[0] == AI:
                return 10
            elif row[0] == HUMAN:
                return -10

    # Check columns for victory
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col]:
            if board[0][col] == AI:
                return 10
            elif board[0][col] == HUMAN:
                return -10

    # Check diagonals for victory
    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == AI:
            return 10
        elif board[0][0] == HUMAN:
            return -10

    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == AI:
            return 10
        elif board[0][2] == HUMAN:
            return -10

    # No winner
    return 0

# Minimax algorithm implementation with optional Alpha-Beta pruning
def minimax(board, depth, is_maximizing, alpha=-math.inf, beta=math.inf, use_pruning=True):
    score = evaluate(board)
    
    if score == 10 or score == -10:
        return score

    if not is_moves_left(board):
        return 0

    if is_maximizing:
        best = -math.inf

        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    value = minimax(board, depth + 1, False, alpha, beta, use_pruning)
                    best = max(best, value)
                    board[i][j] = EMPTY
                    if use_pruning:
                        alpha = max(alpha, best)
                        if beta <= alpha:
                            break
        return best
    else:
        best = math.inf

        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = HUMAN
                    value = minimax(board, depth + 1, True, alpha, beta, use_pruning)
                    best = min(best, value)
                    board[i][j] = EMPTY
                    if use_pruning:
                        beta = min(beta, best)
                        if beta <= alpha:
                            break
        return best

# Get the best move for AI using minimax
def find_best_move(board, use_pruning=True):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                move_val = minimax(board, 0, False, use_pruning=use_pruning)
                board[i][j] = EMPTY

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

# Print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Check if the game is over
def check_game_over(board):
    score = evaluate(board)
    if score == 10:
        print("AI wins!")
        return True
    elif score == -10:
        print("You win!")
        return True
    elif not is_moves_left(board):
        print("It's a draw!")
        return True
    return False

# Main game loop
def play_game():
    board = create_board()
    human_turn = True

    while True:
        print_board(board)
        if human_turn:
            move = input("Enter your move (row and column: 1 1): ")
            row, col = map(int, move.split())
            row -= 1
            col -= 1
            if board[row][col] != EMPTY:
                print("Invalid move. Try again.")
                continue
            board[row][col] = HUMAN
        else:
            print("AI is thinking...")
            row, col = find_best_move(board)
            board[row][col] = AI
            print(f"AI chose: {row + 1} {col + 1}")

        if check_game_over(board):
            print_board(board)
            break

        human_turn = not human_turn

if _name_ == "_main_":
    play_game()
